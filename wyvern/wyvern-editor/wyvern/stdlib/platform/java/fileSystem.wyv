module def fileSystem(java: Java): {} fileSystem.FileSystem

import java:wyvern.stdlib.support.FileIO.file
import fileSystem.fileEffects

/* Import Types */
import fileSystem.File
import fileSystem.Directory
import fileSystem.BoundedReader
import fileSystem.Writer
import fileSystem.RandomAccessFile
import fileSystem.BinaryReader
import fileSystem.BinaryWriter
import fileSystem.ByteArray

import wyvern.option
import wyvern.collections.llist

type Option = option.Option

type List = llist.LinkedList

effect Read = {fileEffects.Read}
effect Write = {fileEffects.Write}
effect Append = {fileEffects.Append}

def directoryFor(path: String): {} Directory[{fileEffects.Read}, {fileEffects.Write}, {fileEffects.Append}] = new
    effect Read = {fileEffects.Read}
    effect Write = {fileEffects.Write}
    effect Append = {fileEffects.Append}
    def files() : {fileEffects.Read} List[File]
        val filesArrayList = file.getDirFiles(path)
        def addHelper(l:List[File], i:Int):List[File]
            if (filesArrayList.size() > i)
                addHelper(l.push(makeFileHelper(filesArrayList.get(i))), i+1)
              else
                l
        addHelper(llist.Nil[File](), 0)

def makeFileHelper(javaFile:Dyn): {} File[{fileEffects.Read}, {fileEffects.Write}, {fileEffects.Append}] = new
    effect Read = {fileEffects.Read}
    effect Write = {fileEffects.Write}
    effect Append = {fileEffects.Append}

    val f = javaFile

    def makeReader(): {fileEffects.Read} BoundedReader
        val br = file.openBRForRead(this.f)
        new
            effect Read = {fileEffects.Read}
            effect Close = {fileEffects.Close}
            def read(): {this.Read} Int
                file.readCharFromFile(br)
            def readLine(): {this.Read} Option[String]
                val line = file.readLineFromFile(br)
                if (file.isNull(line))
                    option.None[String]()
                  else
                    option.Some[String](line)
            def readFully(): {this.Read} String
                file.readFullyFile(br)
            def close(): {this.Close} Unit
                file.closeReader(br)

    def makeWriter(): {fileEffects.Read} Writer[{fileEffects.Write, fileEffects.Append}, {fileEffects.Close}]
        val bw = file.openBWForWrite(this.f)
        new
            effect Write = {fileEffects.Write, fileEffects.Append}
            effect Close = {fileEffects.Close}
            def write(s: String): {this.Write} Unit
                file.writeString(bw, s)
            def close(): {this.Close} Unit
                file.closeWriter(bw)

    /* For now this seems a little messy, considering the typical default
     * is to have a FileWriter append to a file, not overwrite...
     * Consider how to design this better
     * Name method openForAppend or openForWrite? Since they're just returning Writer
     */
    def makeAppender(): {fileEffects.Read} Writer[{fileEffects.Append}, {fileEffects.Close}]
        val bw = file.openBWForAppend(this.f)
        new
            effect Write = {fileEffects.Append}
            effect Close = {fileEffects.Close}
            def write(s: String): {this.Write} Unit
                file.writeString(bw, s)
            def close(): {this.Close} Unit
                file.closeWriter(bw)

    def makeBinaryReader(): {fileEffects.Write} BinaryReader
        val br = file.makeFileInputStream(this.f)

        new
            effect Read = {fileEffects.Read}
            effect Close = {fileEffects.Close}
            def read(): {this.Read} Int
                file.readArbitraryPrecisionInteger(br)
            /*
            def readBytes(numBytes: Int): {this.Read} Int
                def shift (b:Int, iter:Int): Int
                    if (iter == 0)
                        b
                      else
                        val readnext = file.readByteFileInputStream(br)
                        if (readnext == -1)
                            b
                          else
                            shift(((b * 256) + readnext), iter - 1)
                shift(0,numBytes)
            */
            def readUTF(): {this.Read} String
                file.readUTFFileInputStream(br)
            def close(): {this.Close} Unit
                file.closeFileInputStream(br)

    def makeBinaryWriter(): {fileEffects.Write} BinaryWriter
        val bw = file.makeFileOutputStream(this.f)
        new
            effect Write = {fileEffects.Write}
            effect Close = {fileEffects.Close}
            def write(b: Int): {this.Write} Unit
                file.writeArbitraryPrecisionInteger(bw, b)
            /*
            def writeBytes(b: Int, numBytes: Int): {this.Write} Unit
                if (numBytes > 0)
                    this.writeBytes(b/256, numBytes - 1)
                    file.writeByteFileOutputStream(bw, b)
            */
            def writeUTF(s: String): {this.Write} Unit
                file.writeUTFFileOutputStream(bw, s)
            def close(): {this.Close} Unit
                file.closeFileOutputStream(bw)

    def makeRandomAccessFile(mode: String): {fileEffects.Write} RandomAccessFile
        val rf = file.makeRandomAccessFile(this.f, mode)
        new
            effect Read = {fileEffects.Read}
            effect Write = {fileEffects.Write}
            effect Close = {fileEffects.Close}
            def close(): {this.Close} Unit
                file.closeRandomAccessFile(rf)
            def getPosition(): {this.Read} Int
                file.accessFilePointer(rf)
            def seek(pos: Int): {this.Read} Unit
                file.seekFilePointer(rf, pos)
            def length(): {this.Read} Int
                file.getRandomAccessFileLength(rf)
            def readLine(): {this.Read} String
                file.readLineRandomAccess(rf)
            def readUTF(): {this.Read} String
                file.readUTFRandomAccess(rf)
            def write(s: String): {this.Write} Unit
                file.writeStringRandomAccess(rf, s)
            def writeUTF(s: String): {this.Write} Unit
                file.writeUTFRandomAccess(rf, s)

def fileFor(path: String): {fileEffects.Read} File[{fileEffects.Read}, {fileEffects.Write}, {fileEffects.Append}]
    val f = file.createNewFile(path)
    makeFileHelper(f)

def makeByteArray(size: Int): {fileEffects.Write} ByteArray
    val bytes = file.makeByteArray(size)
    new
        effect Read = {fileEffects.Read}
        effect Write = {fileEffects.Write}
        def get(i: Int): {this.Read} Int
            file.getByteArray(bytes, i)
        def set(i: Int, n: Int): {this.Write} Unit
            file.setByteArray(bytes, i, n)