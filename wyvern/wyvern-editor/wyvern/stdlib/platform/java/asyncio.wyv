module def asyncio(java : Java)

import java:wyvern.stdlib.support.NIO.nio

//Import effects
import io.networkEffects

//Import modules
import future
import bytebuffer
import wyvern.option

val future = future(java)
val bytebuffer = bytebuffer(java)

type ByteBuffer = bytebuffer.ByteBuffer
type Option = option.Option

// TCP
type Socket
    def read(buf : ByteBuffer) : {networkEffects.Read} future.Future[Int]
    def write(buf : ByteBuffer) : {networkEffects.Write} future.Future[Int]
    def close() : Unit

// TCP
type ServerSocket
    def accept() : {networkEffects.Connect} future.Future[Socket]
    def close() : Unit

// UDP
type DatagramChannel
    // returns None if no packet ready, Some(Packet) if there was
	// user must initialize the byte buffer size
    def receive(buf : ByteBuffer) : {networkEffects.Read} Option[Packet]
    // returns number of bytes sent
    def send(packet: Packet) : {networkEffects.Write} Int
    def close() : Unit

// UDP
type Packet
    val data : ByteBuffer
    val address : Unit // java SocketAddress

def makeDatagramPacket(buf : ByteBuffer, hostname : String, port : Int) : Packet = new
    val data = buf
    val address = makeSocketAddress(hostname, port)

def makeSocketAddress(hostname : String, port : Int) : Unit
    nio.makeSocketAddress(hostname, port)
    
// for testing
def socketAddressToString(addr : Unit) : String
    nio.addressToString(addr)

def makeDatagramChannel(port : Int) : DatagramChannel
    val chan = nio.makeDatagramChannel(port)
    new
        def receive(buf : ByteBuffer) : {networkEffects.Read} Option[Packet] // fills buffer and returns packet if ready
            val maybeAddr = nio.receiveUDP(chan, buf.buffer)
            if (nio.isNull(maybeAddr))
                option.None[Packet]()
              else
                val packet = new
                    val data = buf
                    val address = maybeAddr
                option.Some[Packet](packet)
        def send(packet : Packet) : {networkEffects.Write} Int
            nio.sendUDP(chan, packet.data.buffer, packet.address)
        def close() : Unit
            nio.closeChannel(chan)

def makeServerSocket(port : Int) : ServerSocket
    val serverChannel = nio.makeServerSocketChannel(port)
    def makeSocketFromChannel(channel:Unit) : Socket = new
        def read(buf:ByteBuffer):{networkEffects.Read}future.Future[Int] = future.Future[Int](nio.socketRead(channel,buf.buffer))
        def write(buf:ByteBuffer):{networkEffects.Write}future.Future[Int] = future.Future[Int](nio.socketWrite(channel,buf.buffer))
        def close():Unit = nio.closeChannel(channel)
    new
        def accept() : {networkEffects.Connect} future.Future[Socket]
            future.Future[Unit](nio.serverAccept(serverChannel)).andThen[Socket](
                (channel:Unit) => makeSocketFromChannel(channel)
            )
        def close() : Unit
            nio.closeChannel(serverChannel)
/*
def makeSocket(hostname : String, port : Int) : {networkEffects.Connect} future.Future[Socket]
    val channel = nio.makeSocketChannel()
    val connected : future.Future[Unit] = future.Future[Unit](nio.socketChannelConnect(channel, hostname, port))
    val socket : Socket = new
        def read(buf : ByteBuffer) : {networkEffects.Read} future.Future[Int]
            future.Future[Int](nio.socketRead(channel, buf.buffer))
        def write(buf : ByteBuffer) : {networkEffects.Write} future.Future[Int]
            future.Future[Int](nio.socketWrite(channel, buf.buffer))
        def close() : Unit
            nio.closeChannel(channel)
    new
        type T = Socket
        def get() : Socket
            val wait = connected.get() //blocks until done
            socket
        def isCancelled() : Boolean = connected.isCancelled()
        def isDone() : Boolean = connected.isDone()
        def cancel() : Boolean = connected.cancel()
        def andThen[U](cb : this.T -> U) : future.Future[U]
            val conv = (() => 
                socket
            )
            val temp : future.Future[this.T] = connected.andThen[this.T](conv)
            temp.andThen[U](cb)
*/
