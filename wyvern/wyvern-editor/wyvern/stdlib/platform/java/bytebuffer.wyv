module def bytebuffer(java:Java)

import java:wyvern.stdlib.support.ByteBufferWrapper.bb

import fileSystem.fileEffects
import fileSystem.BinaryWriter
import fileSystem.BinaryReader

// TODO: can add more functionality, dealing with marks, clearing, relative operations, resetting the pointer
type ByteBuffer
    val size : Int
    val buffer : Unit //java ByteBuffer
    def get(index : Int) : Int
    def set(index : Int, value : Int) : Unit
    
// makes an empty ByteBuffer
def makeByteBuffer(allocSize : Int) : ByteBuffer
    new
        val size = allocSize
        val buffer = bb.makeByteBuffer(allocSize)
        def get(index : Int) : Int
            bb.byteBufferGet(this.buffer, index)
        def set(index : Int, value : Int) : Unit
            bb.byteBufferSet(this.buffer, index, value)
            
// temporary design for String -> ByteBuffer
def makeByteBufferFromString(s : String) : ByteBuffer
    new
        val size = s.length()
        val buffer = bb.makeFromString(s)
        def get(index : Int) : Int
            //bb.charGet(this.buffer, index)
            bb.byteBufferGet(this.buffer, index)
        def set(index : Int, value : Int) : Unit
            //bb.charSet(this.buffer, index, value)
            bb.byteBufferSet(this.buffer, index, value)

def toString(buf : ByteBuffer) : String
    bb.stringFromByteBuffer(buf.buffer)

def makeBinaryReaderFor(buf : ByteBuffer) : BinaryReader
    bb.initializeForRead(buf.buffer)
    new
        effect Read = {fileEffects.Read}
        effect Close = {fileEffects.Close}
        def read() : {this.Read} Int
            bb.getNext(buf.buffer)
        def readUTF() : {this.Read} String
            bb.readUTF(buf.buffer)
        def close() : Unit
            bb.close() //temporary

def makeBinaryWriterFor(buf : ByteBuffer) : BinaryWriter
    bb.initializeForWrite(buf.buffer)
    new
        effect Write = {fileEffects.Write}
        effect Close = {fileEffects.Close}
        //write byte
        def write(b : Int) : {this.Write} Unit
            bb.writeNext(buf.buffer, b)
        def writeUTF(s : String) : {this.Write} Unit
            bb.writeUTF(buf.buffer, s)
        def close() : Unit
            bb.close() //temporary