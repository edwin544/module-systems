module def io(java:Java)
import java:wyvern.stdlib.support.IO.io

//Import effects
import io.networkEffects

//Import types
import fileSystem.BinaryReader
import fileSystem.BinaryWriter
import fileSystem.Reader
import fileSystem.Writer

//Import modules
import bytebuffer
import wyvern.option

val bytebuffer = bytebuffer(java)
type ByteBuffer = bytebuffer.ByteBuffer

effect Connect = {networkEffects.Connect}

// === Library Types ===

type Socket
    effect Read
    effect Write
    def makeReader():Reader[{this.Read}]
    def makeWriter():Writer[{this.Write}]
    def makeBinaryReader():BinaryReader
    def makeBinaryWriter():BinaryWriter
    def close():Unit

type ServerSocket
    def accept():{Connect}Socket
    def close():Unit

type DatagramChannel
    def send(p:Packet):{networkEffects.Write}Int
    def receive(buf:ByteBuffer):{networkEffects.Read}Packet
    def close():Unit

resource type Packet
    val data : ByteBuffer
    val address : Unit // java SocketAddress

// === Creator Functions ===
def makeServerSocket(port:Int):ServerSocket
    val serverSocket = io.makeServerSocket(port)
    new
        def accept():{Connect}Socket
            val socket = serverSocket.accept()
            //copied from makeSocket
            new
                effect Read = {networkEffects.Read}
                effect Write = {networkEffects.Write}
                def makeReader():Reader[{networkEffects.Read}]
                    val reader = io.makeReader(socket)
                    new
                        effect Read = {networkEffects.Read}
                        effect Close = {networkEffects.Close}
                        def read():{this.Read}Int
                            reader.read()
                        def readLine():{this.Read}option.Option[String]
                            val s : String = reader.readLine()
                            if(io.isNull(s))
                                option.None[String]()
                              else
                                option.Some[String](s)
                        def close():{}Unit
                            reader.close()
                def makeWriter():Writer[{networkEffects.Write}]
                    val writer = io.makeWriter(socket)
                    new
                        effect Write = {networkEffects.Write}
                        effect Close = {networkEffects.Close}
                        def write(s:String):{this.Write}Unit
                            writer.write(s)
                        def close():{this.Close}Unit
                            writer.close()
                //DataInputStream abstraction
                def makeBinaryReader():BinaryReader
                    val reader = io.makeBinaryReader(socket)
                    new
                        effect Read = {networkEffects.Read}
                        effect Close = {networkEffects.Close}
                        def read():{this.Read}Int
                            reader.read()
                        def readUTF():{this.Read}String
                            reader.readUTF()
                        def close(): {this.Close} Unit
                            reader.close()
                //DataOutputStream abstraction
                def makeBinaryWriter():BinaryWriter
                    val writer = io.makeBinaryWriter(socket)
                    new
                        effect Write = {networkEffects.Write}
                        effect Close = {networkEffects.Close}
                        def write(b:Int):{this.Write}Unit
                            writer.write(b)
                        def writeUTF(s:String):{this.Write}Unit
                            writer.writeUTF(s)
                        def close(): {this.Close} Unit
                            writer.close()
                def close():Unit
                    socket.close()
        def close():Unit
            serverSocket.close()

def makeSocket(hostname:String, port:Int):{Connect}Socket[{networkEffects.Read},{networkEffects.Write}]
    val socket = io.makeSocket(hostname, port)
    new
        effect Read = {networkEffects.Read}
        effect Write = {networkEffects.Write}
        def makeReader():Reader[{networkEffects.Read}]
            val reader = io.makeReader(socket)
            new
                effect Read = {networkEffects.Read}
                effect Close = {networkEffects.Close}
                def read():{this.Read}Int
                    reader.read()
                def readLine():{this.Read}option.Option[String]
                    val s : String = reader.readLine()
                    if(io.isNull(s))
                        option.None[String]()
                      else
                        option.Some[String](s)
                def close():{this.Close}Unit
                    reader.close()
        def makeWriter():Writer[{networkEffects.Write}]
            val writer = io.makeWriter(socket)
            new
                effect Write = {networkEffects.Write}
                effect Close = {networkEffects.Close}
                def write(s:String):{this.Write}Unit
                    writer.write(s)
                def close():{this.Close}Unit
                    writer.close()
        def makeBinaryReader():BinaryReader
            val reader = io.makeBinaryReader(socket)
            new
                effect Read = {networkEffects.Read}
                effect Close = {networkEffects.Close}
                def read():{this.Read}Int
                    reader.read()
                def readUTF():{this.Read}String
                    reader.readUTF()
                def close(): {this.Close} Unit
                    reader.close()
        def makeBinaryWriter():BinaryWriter
            val writer = io.makeBinaryWriter(socket)
            new
                effect Write = {networkEffects.Write}
                effect Close = {networkEffects.Close}
                def write(b:Int):{this.Write}Unit
                    writer.write(b)
                def writeUTF(s:String):{this.Write}Unit
                    writer.writeUTF(s)
                def close(): {this.Close} Unit
                    writer.close()
        def close():Unit
            socket.close()
            

def makeSocketAddress(hostname : String, port : Int) : Unit
    io.makeSocketAddress(hostname, port)

def makeDatagramChannel(port:Int):DatagramChannel
    val chan = io.makeDatagramChannel(port)
    new
        def send(p:Packet):{networkEffects.Write}Int
            io.sendDatagram(chan, p.data.buffer, p.address)
        def receive(buf:ByteBuffer):{networkEffects.Read}Packet = new
            val data = buf
            val address = io.receiveDatagram(chan, buf.buffer)
        def close():Unit
            io.closeChannel(chan)

def makePacket(data:ByteBuffer, hostname:String, port:Int):Packet = new
    val data = data
    val address = io.makeSocketAddress(hostname, port)