module list

import wyvern.option
//import wyvern.util.matching.regexInternal

type Option = option.Option

resource type List
    type E
    def append(e:this.E):Unit
    def appendAll(other:List[this.E]):Unit
    def find(pred:this.E -> Boolean):Option[this.E]
    def length():Int
    def get(n:Int):Option[this.E]
    /** Removes the n'th element from the List; indexing starts with 0.
     *  Returns true if the removal succeeded (i.e. if n was in range) */
    def remove(n:Int):Boolean
    def do(f:this.E -> Any):Unit
    def map[F](f:this.E -> F):List[F] // functional map
    
    
def make[E]():List[E]
    resource type Cell
        var element:E
        var next:Option[Cell]
        def find(pred:E -> Boolean):Option[E]
        def get(n:Int):Option[E]
        def getCell(n:Int):Option[Cell]
        def do(f:E -> Any):Unit
    def makeCell(e:E, n:Option[Cell]):Cell = new (self) =>
        var element:E = e
        var next:Option[Cell] = n
        def find(pred:E -> Boolean):Option[E]
            pred(self.element).ifTrue(
                () => option.Some[E](self.element),
                () => self.next.flatMap[E]((c:Cell) => c.find(pred)))
        def get(n:Int):Option[E]
            (n == 0).ifTrue(
                () => option.Some[E](self.element),
                () => self.next.flatMap[E]((c:Cell) => c.get(n-1)))
        def getCell(n:Int):Option[Cell]
            (n == 0).ifTrue(
                () => option.Some[Cell](self),
                () => self.next.flatMap[Cell]((c:Cell) => c.getCell(n-1)))
        def do(f:E -> Any):Unit
            f(self.element)
            self.next.map[Unit](c:Cell => c.do(f))
    def makeOneCell(e:E):Cell = makeCell(e, option.None[Cell]())
    new (self) =>
        type E = E
        var first:Option[Cell] = option.None[Cell]()
        var last:Option[Cell] = option.None[Cell]()
        var size:Int = 0
        def append(e:self.E):Unit
            def thenCase():Unit
                val cell = makeOneCell(e)
                self.last.map[Unit](c:Cell => c.next = option.Some[Cell](cell))
                self.last = option.Some[Cell](cell)
            def elseCase():Unit
                self.first = option.Some[Cell](makeOneCell(e))
                self.last = self.first
            self.first.isDefined.ifTrue(() => thenCase(), () => elseCase())
            /*IfTSL.doif(self.first.isDefined, ~)
              then
                val cell = makeOneCell(e)
                self.last.map[Unit](c:Cell => c.next = option.Some[Cell](cell))
                self.last = option.Some[Cell](cell)
              else
                self.first = option.Some[Cell](makeOneCell(e))
                self.last = self.first*/
            self.size = self.size + 1
        def appendAll(other:List[self.E]):Unit
            other.do(e:self.E => self.append(e))
        def find(pred:self.E -> Boolean):Option[E]
            self.first.flatMap[E](c:Cell => c.find(pred))
        def length():Int = self.size
        def get(n:Int):Option[E] = self.first.flatMap[E](c:Cell => c.get(n))
        def remove(n:Int):Boolean
            def definitelyRemove():Boolean
                var lastCell:Option[Cell] = option.None[Cell]()
                def removeInMiddle():Unit
                    val cellBefore = self.first.flatMap[Cell](c:Cell => c.getCell(n-1))
                    cellBefore.map[Unit](c:Cell => c.next = c.next.flatMap[Cell](c2:Cell => c2.next))
                    lastCell = cellBefore
                (n == 0).ifTrue(
                    () => self.first = self.first.flatMap[Cell](c:Cell => c.next),
                    () => removeInMiddle()
                )
                (n == self.size - 1).ifTrue(
                    () => self.last = lastCell,
                    () => unit
                )
                self.size = self.size - 1
                true
            (n > self.size-1 || n < 0).ifTrue(
                () => false,
                () => definitelyRemove()
            )
        def do(f:E -> Any):Unit = self.first.map[Unit](c:Cell => c.do(f))
        def map[F](f:self.E -> F):List[F]
            val newList:List[F] = make[F]()
            self.do(e => newList.append(f(e)))
            newList

// temporary hack; used only in wyvern.collections.list
def makeD():Dyn
    make[Dyn]()
