module parser

import wyvern.util.matching.regex
import tsls.lexer
import wyvern.ast
import wyvern.Int
import wyvern.option
import metadata wyvern.collections.list
import debug

// local bindings to make things easier
val tokens = lexer.tokens
type AST = ast.AST

// A parse function for reverse Polish notation
def parse(input:String):option.Option[ast.AST] // Option of AST
	// Create a scanner configuration, setting up the whitespace operator
	val config = lexer.makeScannerConfig(regex("[ \n\t]+"))

	// Add regular expressions and corresponding tokens
	config.addTokenKind(regex("\\d+")      , tokens.NUMBER)
	config.addTokenKind(regex("[\\+\\-\\*/]"), tokens.OPERATOR)
	config.addTokenKind(regex("\\z")       , tokens.EOF)

	// create a scanner and scan the input
	val scanner = lexer.makeScanner(config, input)
	debug.print(input)
	doParse(scanner)

// The starting point for recursive-descent parsing	
def doParse(scanner:lexer.Scanner):option.Option[ast.AST]
	val t = scanner.nextToken()
	(t.kind() == tokens.NUMBER).ifTrue(
	  () => parseWithOneExpr(scanner, ast.int(Int.from(t.print()))),
	  () => option.None[ast.AST]()
	)

// We've got exactly one expression on the stack
def parseWithOneExpr(scanner:lexer.Scanner, exp:AST):option.Option[ast.AST]
	val t = scanner.nextToken()
	(t.kind() == tokens.EOF).ifTrue(
		() => option.Some[ast.AST](exp),
		() => (t.kind() == tokens.NUMBER).ifTrue(
			() => parseWithTwoExprs(scanner, exp, ast.int(Int.from(t.print())), false),
			() => option.None[ast.AST]()
		)
	)

// We've got two (ore more, if moreOnStack is true) expressions on the stack
def parseWithTwoExprs(scanner:lexer.Scanner, exp1:AST, exp2:AST,
                      moreOnStack:Boolean):option.Option[ast.AST]
    def compose(exp3:AST):option.Option[ast.AST]
        val expOption : option.Option[ast.AST] = parseWithTwoExprs(scanner, exp2, exp3, true)
        expOption.flatMap[AST]((expResult) => parseWithTwoExprs(scanner, exp1,expResult, moreOnStack))
    val t = scanner.nextToken()
    (t.kind() == tokens.OPERATOR).ifTrue(
        () => moreOnStack.ifTrue(
            () => option.Some[ast.AST](ast.call(exp1,t.print(),{exp2})),
            () => parseWithOneExpr(scanner, ast.call(exp1,t.print(),{exp2}))
        ),
        () => (t.kind() == tokens.NUMBER).ifTrue(
            () => compose(ast.int(Int.from(t.print()))),
            () => option.None[ast.AST]()
        )
    )
