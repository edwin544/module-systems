/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ArchParser.jj */
/*@egen*/options
{
                           
	             
	               
    STATIC = false;
    USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(ArchParser)

package wyvern.tools.parsing.coreparser.arch;


import wyvern.tools.parsing.coreparser.TokenManager;
import wyvern.tools.parsing.coreparser.Token;
import wyvern.tools.parsing.coreparser.ParseException;

public class ArchParser/*@bgen(jjtree)*/implements ArchParserTreeConstants/*@egen*/   {/*@bgen(jjtree)*/
  protected JJTArchParserState jjtree = new JJTArchParserState();

/*@egen*/ 

    public String fname;
    public static String kindToName(int kind) {
      switch (kind) {
      case MULTI_LINE_COMMENT: return "MULTI_LINE_COMMENT";
      case COMMA: return "COMMA";
      case ATTACHMENTS: return "ATTACHMENTS";
      case IS: return "IS";
      case BINDINGS: return "BINDINGS";
      case ENTRYPOINTS: return "ENTRYPOINTS";
      case CONNECT: return "CONNECT";
      case DOT: return "DOT";
      case AND: return "AND";
      case WITH: return "WITH";
      case CONNECTORS: return "CONNECTORS";
      case COMPONENTS: return "COMPONENTS";
      case ARCHITECTURE: return "ARCHITECTURE";
      case VAL: return "VAL";
      case CONNECTOR: return "CONNECTOR";
      case COMPONENT: return "COMPONENT";
      case PORT: return "PORT";
      case COLON: return "COLON";
      case IDENTIFIER: return "IDENTIFIER";
      case WHITESPACE: return "WHITESPACE";
      case DEDENT: return "DEDENT";
      case INDENT: return "INDENT";
      case NEWLINE: return "NEWLINE";
      case PROVIDES: return "PROVIDES";
      case REQUIRES: return "REQUIRES";
      default: return "UNKNOWN(" + kind + ")";
      }
    }
}

PARSER_END(ArchParser)

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Keywords */
{
  <COMPONENT: "component">
| <EXTERNAL: "external">
| <PORT: "port">
| <PROVIDES: "provides">
| <REQUIRES: "requires">
| <CONNECTOR: "connector">
| <VAL: "val">
| <ARCHITECTURE: "architecture">
| <COMPONENTS: "components">
| <CONNECTORS: "connectors">
| <ATTACHMENTS: "attachments">
| <CONNECT: "connect">
| <AND: "and">
| <WITH: "with">
| <ENTRYPOINTS: "entryPoints">
| <BINDINGS: "bindings">
| <IS: "is">
}

TOKEN : /* Logical Formatting */
{
  <DEDENT>
| <INDENT>
| <NEWLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <COLON: ":">
| <DOT: ".">
| <COMMA: ",">
}

/** Root production. */
SimpleNode ArchDesc() :
{/*@bgen(jjtree) ArchDesc */
  ASTArchDesc jjtn000 = new ASTArchDesc(JJTARCHDESC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  }
{/*@bgen(jjtree) ArchDesc */
    try {
/*@egen*/
    ArchTypeDeclSeq()
    { jjtn000.setLocation(fname, 0, 0); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArchTypeDeclSeq()      : 
{ }
{
    ArchTypeDecls() 
    ( ArchTypeDecls() )*
|
    <EOF>
}

void ArchTypeDecls()       : 
{ }
{
    ComponentTypeDecl()       
|
    ConnectorTypeDecl()       
|
    ArchitectureTypeDecl()    
}

void ComponentTypeDecl() : 
{/*@bgen(jjtree) ComponentTypeDecl */
  ASTComponentTypeDecl jjtn000 = new ASTComponentTypeDecl(JJTCOMPONENTTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name; }
{/*@bgen(jjtree) ComponentTypeDecl */
    try {
/*@egen*/
    [ <EXTERNAL> { jjtn000.setExternal(true); } ] <COMPONENT> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ComponentTypeDeclBody()
            ( ComponentTypeDeclBody() {  } )*
            <DEDENT>
    { jjtn000.setTypeName(name.image); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setLocation(fname, name.beginLine, name.beginColumn); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ComponentTypeDeclBody()       : 
{  }
{
    MemberDecls()         
|
    ArchTypeDecls()         
|
    BindingDecls()           

}

void ConnectorTypeDecl() : 
{/*@bgen(jjtree) ConnectorTypeDecl */
  ASTConnectorTypeDecl jjtn000 = new ASTConnectorTypeDecl(JJTCONNECTORTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name; }
{/*@bgen(jjtree) ConnectorTypeDecl */
    try {
/*@egen*/
    <CONNECTOR> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ValDecl()
    (ValDecl())*
            <DEDENT>
    { jjtn000.setTypeName(name.image); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setLocation(fname, name.beginLine, name.beginColumn); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*Errors*/
void ArchitectureTypeDecl() : 
{/*@bgen(jjtree) ArchitectureTypeDecl */
  ASTArchitectureTypeDecl jjtn000 = new ASTArchitectureTypeDecl(JJTARCHITECTURETYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name; }
{/*@bgen(jjtree) ArchitectureTypeDecl */
    try {
/*@egen*/
    <ARCHITECTURE> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ArchElemDeclSeq()
            <DEDENT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTypeName(name.image); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArchElemDeclSeq()       : 
{  }
{
    ArchElemDecls() 
    (ArchElemDecls() )*
}

void ArchElemDecls()       : 
{  }
{
    ComponentDecls()      
|
    ConnectorDecls()      
|
    AttachmentDecls()     
|
    EntryPointDecls()     
}

void ComponentDecls()       :
{  }
{
    <COMPONENTS>
    <NEWLINE> <INDENT> 
            ComponentDeclAux()
            (ComponentDeclAux())*
            <DEDENT>
}

void ComponentDeclAux()       : 
{ String type = null; }
{
    type=ComponentDecl("")
    (ComponentDecl(type))* <NEWLINE>
}

String ComponentDecl(String t) :
{/*@bgen(jjtree) ComponentDecl */
  ASTComponentDecl jjtn000 = new ASTComponentDecl(JJTCOMPONENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token type; Token name; }
{/*@bgen(jjtree) ComponentDecl */
    try {
/*@egen*/
    type=<IDENTIFIER> name=<IDENTIFIER>/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/     { jjtn000.setType(type.image); 
                                              jjtn000.setName(name.image); 
                                              jjtn000.setLocation(fname, name.beginLine, name.beginColumn);
                                              return type.image; }
|
    <COMMA> name=<IDENTIFIER>/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/               { jjtn000.setType(t); 
                                              jjtn000.setName(name.image); 
                                              jjtn000.setLocation(fname, name.beginLine, name.beginColumn);
                                              return t; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConnectorDecls()       : 
{  }
{
    <CONNECTORS> 
    <NEWLINE> <INDENT> 
            ConnectorDeclAux()
            (ConnectorDeclAux())*
            <DEDENT>
}

void ConnectorDeclAux()       : 
{ String type = null; }
{
    type=ConnectorDecl("")
    (ConnectorDecl(type))* <NEWLINE>
}

String ConnectorDecl(String t) :
{/*@bgen(jjtree) ConnectorDecl */
  ASTConnectorDecl jjtn000 = new ASTConnectorDecl(JJTCONNECTORDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token type; Token name; }
{/*@bgen(jjtree) ConnectorDecl */
    try {
/*@egen*/
    type=<IDENTIFIER> name=<IDENTIFIER>/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/     { jjtn000.setType(type.image); 
                                              jjtn000.setName(name.image); 
                                              jjtn000.setLocation(fname, name.beginLine, name.beginColumn);
                                              return type.image; }
|
    <COMMA> name=<IDENTIFIER>/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/               { jjtn000.setType(t); 
                                              jjtn000.setName(name.image); 
                                              jjtn000.setLocation(fname, name.beginLine, name.beginColumn);
                                              return t; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AttachmentDecls()       : 
{  }
{
    <ATTACHMENTS>
    <NEWLINE> <INDENT> 
    <CONNECT> AttachmentDecl()
                (AttachmentDecl())*
            <DEDENT>
}

void AttachmentDecl() :
{/*@bgen(jjtree) AttachmentDecl */
  ASTAttachmentDecl jjtn000 = new ASTAttachmentDecl(JJTATTACHMENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String p1; String p2; Token cntr; }
{/*@bgen(jjtree) AttachmentDecl */
    try {
/*@egen*/
    p1=Segment() <AND> p2=Segment() { jjtn000.addPort(p1); jjtn000.addPort(p2); }
    ( <AND> p2=Segment() { jjtn000.addPort(p2); } )* <WITH> cntr=<IDENTIFIER> <NEWLINE>
    { jjtn000.setConnector(cntr.image); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setLocation(fname, cntr.beginLine, cntr.beginColumn); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BindingDecls()       :
{  }
{
    <BINDINGS>
    <NEWLINE> <INDENT> 
        BindingDecl()
        (BindingDecl())*
    <DEDENT>
}

/*Errors?*/
void BindingDecl() :
{/*@bgen(jjtree) BindingDecl */
  ASTBindingDecl jjtn000 = new ASTBindingDecl(JJTBINDINGDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name; String target; }
{/*@bgen(jjtree) BindingDecl */
    try {
/*@egen*/
    name=<IDENTIFIER> <IS> target=Segment() <NEWLINE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setName(name.image); 
      jjtn000.setTarget(target);
      jjtn000.setLocation(fname, name.beginLine, name.beginColumn); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EntryPointDecls()       : 
{  }
{
    <ENTRYPOINTS>
    <NEWLINE> <INDENT>
         EntryPointDecl()
        (EntryPointDecl())* 
            <DEDENT>
}

/*Errors?*/
void EntryPointDecl() :
{/*@bgen(jjtree) EntryPointDecl */
  ASTEntryPointDecl jjtn000 = new ASTEntryPointDecl(JJTENTRYPOINTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name; Token action; }
{/*@bgen(jjtree) EntryPointDecl */
    try {
/*@egen*/
    name=<IDENTIFIER> <COLON> action=<IDENTIFIER> <NEWLINE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setName(name.image); 
      jjtn000.setAction(action.image);
      jjtn000.setLocation(fname, name.beginLine, name.beginColumn); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MemberDecls()       :
{  }
{
    ValDecl() 
| 
    PortDecl() 
}

/*Errors?*/
void PortDecl() :
{/*@bgen(jjtree) PortDecl */
  ASTPortDecl jjtn000 = new ASTPortDecl(JJTPORTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token p; Token req ; Token prov ; Token startMark; }
{/*@bgen(jjtree) PortDecl */
    try {
/*@egen*/
    <PORT> p=<IDENTIFIER> <COLON> (<REQUIRES> req=<IDENTIFIER> { jjtn000.setRequires(req.image); }| 
                        <PROVIDES> prov=<IDENTIFIER> { jjtn000.setProvides(prov.image); }) <NEWLINE>
    { jjtn000.setPort(p.image); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setLocation(fname, p.beginLine, p.beginColumn); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*Errors?*/
void ValDecl() :
{/*@bgen(jjtree) ValDecl */
  ASTValDecl jjtn000 = new ASTValDecl(JJTVALDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; Token name; Token startMark; }
{/*@bgen(jjtree) ValDecl */
    try {
/*@egen*/
    <VAL> name=<IDENTIFIER> <COLON> t=<IDENTIFIER> <NEWLINE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setName(name.image); 
      jjtn000.setType(t.image); 
      jjtn000.setLocation(fname, name.beginLine, name.beginColumn); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Segment()       : 
{ String s; Token t; }
{
    t=<IDENTIFIER> { s = t.image; }
    ( <DOT> t=<IDENTIFIER> { s = s + "." + t.image; } )* 
    { return s; }
}