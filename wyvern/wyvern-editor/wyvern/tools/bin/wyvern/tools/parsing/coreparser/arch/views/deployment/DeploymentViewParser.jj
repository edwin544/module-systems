/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DeploymentViewParser.jj */
/*@egen*/options
{
                           
	             
	//VISITOR = true;
    STATIC = false;
    USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(DeploymentViewParser)

package wyvern.tools.parsing.coreparser.arch.views.deployment;

import wyvern.tools.parsing.coreparser.TokenManager;
import wyvern.tools.parsing.coreparser.Token;
import wyvern.tools.parsing.coreparser.ParseException;

public class DeploymentViewParser/*@bgen(jjtree)*/implements DeploymentViewParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTDeploymentViewParserState jjtree = new JJTDeploymentViewParserState();

/*@egen*/

}

PARSER_END(DeploymentViewParser)

TOKEN : /* Keywords */
{
  <DEPLOYMENT: "deployment">
| <EXTENDS: "extends">
}

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Logical Formatting */
{
  <DEDENT>
| <INDENT>
| <NEWLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <DOT>
| <EQUALS>
}

TOKEN: /* Literals */
{
  <STRING_LITERAL>
}

SimpleNode DeploymentDecl() :
{/*@bgen(jjtree) DeploymentDecl */
    ASTDeploymentDecl jjtn000 = new ASTDeploymentDecl(JJTDEPLOYMENTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
    Token archName;
}
{/*@bgen(jjtree) DeploymentDecl */
    try {
/*@egen*/
    <DEPLOYMENT> name=<IDENTIFIER> <EXTENDS> archName=<IDENTIFIER>
    <NEWLINE> <INDENT> Setters() <DEDENT>
    { }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Setters()      :
{ }
{
    Setter() (Setter())*
}

void Setter() :
{/*@bgen(jjtree) Setter */
  ASTSetter jjtn000 = new ASTSetter(JJTSETTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Setter */
    try {
/*@egen*/
    Lhs() <EQUALS> StringLiteral() <NEWLINE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Lhs() :
{/*@bgen(jjtree) Lhs */
  ASTLhs jjtn000 = new ASTLhs(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Lhs */
    try {
/*@egen*/
    Identifier() <DOT> LhsRemaining()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LhsRemaining() :
{/*@bgen(jjtree) LhsRemaining */
  ASTLhsRemaining jjtn000 = new ASTLhsRemaining(JJTLHSREMAINING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LhsRemaining */
    try {
/*@egen*/
    LOOKAHEAD(2)
    Identifier() <DOT> LhsRemaining()
|
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral() :
{/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <STRING_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}