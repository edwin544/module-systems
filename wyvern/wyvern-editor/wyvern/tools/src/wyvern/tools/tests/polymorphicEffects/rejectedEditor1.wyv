import polymorphicEffects.Logger
import lifted polymorphicEffects.repeaterPlugin

// Resources

type Resource
  // theEffect is abstract, so {file.theEffect} != {network.theEffect}
  effect theEffect

val file : Resource = new
  effect theEffect = {system.FFI}

val network : Resource = new
  effect theEffect = {system.FFI}

// Different implementations of Logger

val logger1 : Logger[{file.theEffect}] = new
  effect log = {file.theEffect}
  def append(contents : String) : {this.log} Unit
    unit

val logger2 : Logger[{network.theEffect}] = new
  effect log = {network.theEffect}
  def append(contents : String) : {this.log} Unit
    unit

// Core editor

val plugin = repeaterPlugin[{logger1.log}](logger1, unit)

def main() : {logger1.log} String
  // Fails because {logger2.log} is a subset of the effect that we chose when
  // we instantiated the plugin, {logger1.log}
  plugin.setLogger(logger2)

  plugin.run("abc")

main()
